{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","main","temp","setTodos","tempC","setTemp","className","id","placeholder","onClick","console","log","city","document","getElementById","value","axios","get","then","response","data","toFixed","catch","error","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"uIAAAA,EAAOC,QAAU,IAA0B,kC,+IC8D5BC,MAzDf,WAAgB,IAAD,EAGeC,mBAAS,CAC/BC,KACI,CACIC,KAAM,OANP,mBAGGC,GAHH,aAScH,qBATd,mBASJI,EATI,KASGC,EATH,KAwCX,OACI,yBAAKC,UAAU,OACX,2BAAOC,GAAG,OAAOC,YAAY,mBAC7B,4BAAQC,QA/BC,WACbC,QAAQC,IAAI,6BAOpB,IAAIC,EAAOC,SAASC,eAAe,QAAQC,MACnCC,IAAMC,IAAN,4DAA+DL,EAA/D,4CACKM,MAAK,SAAUC,GAEZT,QAAQC,IAAIQ,GACZhB,EAASgB,EAASC,MAClBf,GAASc,EAASC,KAAKnB,KAAKC,KAAK,QAAQmB,QAAQ,GAAG,aAEvDC,OAAM,SAAUC,GAEbb,QAAQC,IAAIY,MAEfL,MAAK,iBAWN,MACA,8CAAoBd,EAApB,OCrCQoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlB,SAASC,eAAe,SDyHpB,kBAAmBkB,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdd,OAAM,SAAAC,GACLb,QAAQa,MAAMA,EAAMc,c","file":"static/js/main.e544f89d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport axios from 'axios';\nimport './App.css';\n\nfunction App() {\n\n\n    const [todos, setTodos] = useState({\n        main:\n            {\n                temp: ' ',\n            }\n    });\n    const [tempC, setTemp] = useState();\n\n\n    const getTodos = () => {\n        console.log('todos is getting executed')\n        // fetch('https://api.openweathermap.org/data/2.5/weather?q=Miami&APPID=23115c617732be5077c954f6e8f4d9e6')\n        //     .then(response => response.json())\n        //     .then(json => {\n        //         console.log(json)\n        //         setTodos(json);\n        //     })\nlet city = document.getElementById('city').value;\n        axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&APPID=23115c617732be5077c954f6e8f4d9e6`)\n            .then(function (response) {\n                // handle success\n                console.log(response);\n                setTodos(response.data);\n                setTemp((response.data.main.temp-273.15).toFixed(2)+' Â°C');\n            })\n            .catch(function (error) {\n                // handle error\n                console.log(error);\n            })\n            .then(function () {\n                // always executed\n            });\n\n    }\n\n\n\n    return (\n        <div className=\"App\">\n            <input id='city' placeholder='Enter the city'/>\n            <button onClick={getTodos}>OK</button>\n            <p>Temperature is: {tempC} </p>\n\n            {/*{*/}\n            {/*          todos.map(el => (*/}\n            {/*              <div key={el.id}>{el.title}</div>*/}\n            {/*              )*/}\n            {/*        */}\n            {/*         )*/}\n            {/*}*/}\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}